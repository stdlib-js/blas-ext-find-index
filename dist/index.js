"use strict";var v=function(n,a){return function(){return a||n((a={exports:{}}).exports,a),a.exports}};var l=v(function(J,c){"use strict";var p=require("@stdlib/ndarray-dtypes"),E=require("@stdlib/blas-ext-base-ndarray-gfind-index"),V=require("@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-by-factory"),O=p("all"),F=p("integer_index_and_generic"),k={output:"integer_index_and_generic",casting:"none"},_={default:E},x=V(_,[O],F,k);c.exports=x});var h=v(function(K,w){"use strict";var f=require("@stdlib/assert-has-own-property"),g=require("@stdlib/assert-is-function"),j=require("@stdlib/assert-is-plain-object"),P=require("@stdlib/assert-is-ndarray-like"),I=require("@stdlib/ndarray-ndims"),o=require("@stdlib/string-format"),R=l();function L(n){var a,r,t,s,u,e;if(t=arguments.length,!P(n))throw new TypeError(o("invalid argument. First argument must be an ndarray. Value: `%s`.",n));if(s={dims:[-1],keepdims:!1},a=!1,t<=2){if(e=arguments[1],!g(e))throw new TypeError(o("invalid argument. Second argument must be a function. Value: `%s`.",e))}else if(t===3)if(g(arguments[1]))e=arguments[1],u=arguments[2];else{if(r=arguments[1],e=arguments[2],!g(e))throw new TypeError(o("invalid argument. Third argument must be a function. Value: `%s`.",e));a=!0}else{if(r=arguments[1],e=arguments[2],u=arguments[3],!g(e))throw new TypeError(o("invalid argument. Third argument must be a function. Value: `%s`.",e));a=!0}if(a){if(!j(r))throw new TypeError(o("invalid argument. Options argument must be an object. Value: `%s`.",r));f(r,"dim")&&(s.dims[0]=r.dim),f(r,"keepdims")&&(s.keepdims=r.keepdims),f(r,"dtype")&&(s.dtype=r.dtype)}if(I(n)<1)throw new RangeError("invalid argument. First argument must have at least one dimension.");return R(n,s,e,u)}w.exports=L});var q=v(function(M,b){"use strict";var S=require("@stdlib/assert-has-own-property"),d=require("@stdlib/assert-is-function"),z=require("@stdlib/assert-is-plain-object"),y=require("@stdlib/assert-is-ndarray-like"),A=require("@stdlib/ndarray-ndims"),m=require("@stdlib/string-format"),B=l().assign;function C(n,a){var r,t,s,u,e,i;if(s=arguments.length,!y(n))throw new TypeError(m("invalid argument. First argument must be an ndarray. Value: `%s`.",n));if(!y(a))throw new TypeError(m("invalid argument. Second argument must be an ndarray. Value: `%s`.",a));if(u={dims:[-1]},r=!1,s<=3){if(i=arguments[2],!d(i))throw new TypeError(m("invalid argument. Third argument must be a function. Value: `%s`.",i))}else if(s===4)if(d(arguments[2]))i=arguments[2],e=arguments[3];else{if(t=arguments[2],i=arguments[3],!d(i))throw new TypeError(m("invalid argument. Fourth argument must be a function. Value: `%s`.",i));r=!0}else{if(t=arguments[2],i=arguments[3],e=arguments[4],!d(i))throw new TypeError(m("invalid argument. Fourth argument must be a function. Value: `%s`.",i));r=!0}if(r){if(!z(t))throw new TypeError(m("invalid argument. Options argument must be an object. Value: `%s`.",t));S(t,"dim")&&(u.dims[0]=t.dim)}if(A(n)<1)throw new RangeError("invalid argument. First argument must have at least one dimension.");return B(n,a,u,i,e)}b.exports=C});var D=require("@stdlib/utils-define-nonenumerable-read-only-property"),T=h(),G=q();D(T,"assign",G);module.exports=T;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
