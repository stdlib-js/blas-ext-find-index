{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dtypes = require( '@stdlib/ndarray-dtypes' );\nvar gfindIndex = require( '@stdlib/blas-ext-base-ndarray-gfind-index' );\nvar factory = require( '@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-by-factory' );\n\n\n// VARIABLES //\n\nvar idtypes = dtypes( 'all' );\nvar odtypes = dtypes( 'integer_index_and_generic' );\nvar policies = {\n\t'output': 'integer_index_and_generic',\n\t'casting': 'none'\n};\nvar table = {\n\t'default': gfindIndex\n};\n\n\n// MAIN //\n\n/**\n* Returns the index of the first element along an ndarray dimension which passes a test implemented by a predicate function.\n*\n* @private\n* @name findIndex\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform operation\n* @param {string} [options.dtype] - output ndarray data type\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* function isEven( v ) {\n*     return v % 2.0 === 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = [ 1.0, 2.0, -3.0, 4.0, -5.0, 6.0 ];\n*\n* // Define the shape of the input array:\n* var sh = [ 6 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'generic', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = findIndex( x, isEven );\n* // returns <ndarray>\n*\n* var idx = out.get();\n* // returns 1\n*/\nvar findIndex = factory( table, [ idtypes ], odtypes, policies );\n\n\n// EXPORTS //\n\nmodule.exports = findIndex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Returns the index of the first element along an ndarray dimension which passes a test implemented by a predicate function.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {Options} [options] - function options\n* @param {integer} [options.dim=-1] - dimension over which to perform operation\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension index must not exceed input ndarray bounds\n* @throws {RangeError} first argument must have at least one dimension\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* function isEven( v ) {\n*     return v % 2.0 === 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = [ 1.0, 2.0, -3.0, 4.0, -5.0, 6.0 ];\n*\n* // Define the shape of the input array:\n* var sh = [ 2, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 3, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'generic', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = findIndex( x, isEven );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( out );\n* // returns [ 1, 0 ]\n*/\nfunction findIndex( x ) {\n\tvar hasOptions;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar ctx;\n\tvar cb;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\t// Initialize an options object:\n\topts = {\n\t\t'dims': [ -1 ], // default behavior is to perform a reduction over the last dimension\n\t\t'keepdims': false\n\t};\n\n\t// Initialize a flag indicating whether an `options` argument was provided:\n\thasOptions = false;\n\n\t// Case: findIndex( x, clbk )\n\tif ( nargs <= 2 ) {\n\t\tcb = arguments[ 1 ];\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t}\n\t// Case: findIndex( x, ???, ??? )\n\telse if ( nargs === 3 ) {\n\t\t// Case: findIndex( x, clbk, thisArg )\n\t\tif ( isFunction( arguments[ 1 ] ) ) {\n\t\t\tcb = arguments[ 1 ];\n\t\t\tctx = arguments[ 2 ];\n\t\t}\n\t\t// Case: findIndex( x, options, clbk )\n\t\telse {\n\t\t\toptions = arguments[ 1 ];\n\t\t\tcb = arguments[ 2 ];\n\t\t\tif ( !isFunction( cb ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', cb ) );\n\t\t\t}\n\t\t\thasOptions = true;\n\t\t}\n\t}\n\t// Case: findIndex( x, options, clbk, thisArg )\n\telse {\n\t\toptions = arguments[ 1 ];\n\t\tcb = arguments[ 2 ];\n\t\tctx = arguments[ 3 ];\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t\thasOptions = true;\n\t}\n\tif ( hasOptions ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Resolve provided options...\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\topts.dims[ 0 ] = options.dim;\n\t\t}\n\t\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\t\topts.keepdims = options.keepdims;\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t}\n\tif ( ndims( x ) < 1 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must have at least one dimension.' );\n\t}\n\treturn base( x, opts, cb, ctx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = findIndex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' ).assign;\n\n\n// MAIN //\n\n/**\n* Returns the index of the first element along an ndarray dimension which passes a test implemented by a predicate function and assigns the results to a provided output ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {integer} [options.dim=-1] - dimension over which to perform operation\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} function must be provided at least three arguments\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be an ndarray-like object\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension index must not exceed input ndarray bounds\n* @throws {RangeError} first argument must have at least one dimension\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* function isEven( v ) {\n*     return v % 2.0 === 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = [ 1.0, 2.0, -3.0, 4.0, -5.0, 6.0 ];\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 3 ];\n*\n* // Define the array strides:\n* var strides = [ 3, 1 ];\n*\n* // Define the index offset:\n* var offset = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'generic', xbuf, shape, strides, offset, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = zeros( [ 2 ], {\n*     'dtype': 'int32'\n* });\n*\n* // Perform operation:\n* var out = assign( x, y, isEven );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* var arr = ndarray2array( out );\n* // returns [ 1, 0 ]\n*/\nfunction assign( x, out ) {\n\tvar hasOptions;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar ctx;\n\tvar cb;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray. Value: `%s`.', out ) );\n\t}\n\t// Initialize an options object:\n\topts = {\n\t\t'dims': [ -1 ] // default behavior is to perform a reduction over the last dimension\n\t};\n\n\t// Initialize a flag indicating whether an `options` argument was provided:\n\thasOptions = false;\n\n\t// Case: assign( x, out, clbk )\n\tif ( nargs <= 3 ) {\n\t\tcb = arguments[ 2 ];\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t}\n\t// Case: assign( x, out, ???, ??? )\n\telse if ( nargs === 4 ) {\n\t\t// Case: assign( x, out, clbk, thisArg )\n\t\tif ( isFunction( arguments[ 2 ] ) ) {\n\t\t\tcb = arguments[ 2 ];\n\t\t\tctx = arguments[ 3 ];\n\t\t}\n\t\t// Case: assign( x, out, options, clbk )\n\t\telse {\n\t\t\toptions = arguments[ 2 ];\n\t\t\tcb = arguments[ 3 ];\n\t\t\tif ( !isFunction( cb ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a function. Value: `%s`.', cb ) );\n\t\t\t}\n\t\t\thasOptions = true;\n\t\t}\n\t}\n\t// Case: assign( x, out, options, clbk, thisArg )\n\telse {\n\t\toptions = arguments[ 2 ];\n\t\tcb = arguments[ 3 ];\n\t\tctx = arguments[ 4 ];\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t\thasOptions = true;\n\t}\n\tif ( hasOptions ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Resolve provided options...\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\topts.dims[ 0 ] = options.dim;\n\t\t}\n\t}\n\tif ( ndims( x ) < 1 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must have at least one dimension.' );\n\t}\n\treturn base( x, out, opts, cb, ctx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the index of the first element along an ndarray dimension which passes a test implemented by a predicate function.\n*\n* @module @stdlib/blas-ext-find-index\n*\n* @example\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var findIndex = require( '@stdlib/blas-ext-find-index' );\n*\n* function isEven( v ) {\n*     return v % 2.0 === 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = [ 1.0, 2.0, -3.0, 4.0, -5.0, 6.0 ];\n*\n* // Define the shape of the input array:\n* var sh = [ 2, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 3, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'generic', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = findIndex( x, isEven );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( out );\n* // returns [ -1, 1 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "dtypes", "gfindIndex", "factory", "idtypes", "odtypes", "policies", "table", "findIndex", "require_main", "__commonJSMin", "exports", "module", "hasOwnProp", "isFunction", "isPlainObject", "isndarrayLike", "ndims", "format", "base", "findIndex", "x", "hasOptions", "options", "nargs", "opts", "ctx", "cb", "require_assign", "__commonJSMin", "exports", "module", "hasOwnProp", "isFunction", "isPlainObject", "isndarrayLike", "ndims", "format", "base", "assign", "x", "out", "hasOptions", "options", "nargs", "opts", "ctx", "cb", "setReadOnly", "main", "assign"]
}
